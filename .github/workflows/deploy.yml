name: "Deploy to Production"

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  deploy:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Fly CLI
      uses: superfly/flyctl-actions/setup-flyctl@master
      
    - name: Deploy Backend to Fly.io
      run: |
        cd backend
        flyctl deploy --remote-only --app blog-app-expressjs
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    environment: production
    needs: deploy
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Deploy to Vercel/Netlify
      run: |
        echo "Deploy frontend to your preferred hosting service"
        # Example for Vercel:
        # npx vercel --token ${{ secrets.VERCEL_TOKEN }} --prod
        # Example for Netlify:
        # npx netlify deploy --prod --dir=dist --auth ${{ secrets.NETLIFY_AUTH_TOKEN }}
        
  notify-deployment:
    name: Notify Deployment Success
    runs-on: ubuntu-latest
    needs: [deploy, deploy-frontend]
    if: always()
    
    steps:
    - name: Notify Slack on Success
      if: needs.deploy.result == 'success' && needs.deploy-frontend.result == 'success'
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"üöÄ Deployment successful! Blog app is live."}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify Slack on Failure
      if: needs.deploy.result == 'failure' || needs.deploy-frontend.result == 'failure'
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"‚ùå Deployment failed! Please check the logs."}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}