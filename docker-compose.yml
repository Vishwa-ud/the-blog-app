version: '3.8'

services:
  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"  # HTTP backend
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://udeesha:ObuUxhAzY0qnAAr7Z57pBQ@lucid-grub-16179.j77.aws-ap-south-1.cockroachlabs.cloud:26257/defaultdb?sslmode=verify-full
      - TOKEN_SECRET=SECRET
      - CLOUDINARY_API_KEY=937831317112348
      - CLOUDINARY_API_SECRET=hAk3NQxuG7jL3stvrtE4cbN8JIw
      - CLOUDINARY_CLOUD_NAME=dmeiyssiy
    networks:
      - blog-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service (for development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"  # Direct access to frontend
    environment:
      - VITE_API_URL=http://localhost/api  # API via nginx HTTP
      - CHOKIDAR_USEPOLLING=false
      - WATCHPACK_POLLING=false
    networks:
      - blog-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (API only)
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"       # HTTP API access
      - "443:443"     # HTTPS API access
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - blog-network
    restart: unless-stopped

networks:
  blog-network:
    driver: bridge